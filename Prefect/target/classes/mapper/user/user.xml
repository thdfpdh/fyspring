<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- Dao: query찾는 분류 기준 
namespace+id -> com.pcwk.ehr.user.doSelectOne
-->  
<mapper namespace="com.pcwk.ehr.user">

   <select id="idDuplicateCheck" parameterType="UserVO" resultType="int">
         SELECT                   
            COUNT(*) cnt         
         FROM                     
            users                
         WHERE email = #{email}   
   </select>

    <sql id="searchCondition">
	    <where>
	        <choose>
	            <when test="searchDiv !=null and searchDiv == '10'">
	                user_id = #{searchWord}
	            </when>
                <when test="searchDiv !=null and searchDiv == '20'">
                    name LIKE #{searchWord} ||'%'
                </when>
                    <when test="searchDiv !=null and searchDiv == '30'">
                    name LIKE #{searchWord} ||'%'
                </when>
               	            
	        </choose>
	           
	    </where>            
    </sql>

    <select id="doRetrieve" parameterType="UserVO" resultType="UserVO">
        
		SELECT A.*,B.*
		FROM(
		    SELECT TT1.rnum AS no,
		           TT1.email,
		           TT1.name,
		           TT1.password,
		           TT1.tel,
		           TT1.edu,
		           TT1.role
		    FROM (
		        SELECT ROWNUM AS rnum, T1.*
		        FROM (SELECT *
		              FROM users
		              <!--WHERE조건 email(10),name(20),role(30) 회원 검색조건 : 이메일 ,이름,등급 -->
                      <include refid="searchCondition"></include>
		              ORDER BY name desc
		        )T1      
           
		     <![CDATA[   WHERE ROWNUM <= ( #{pageSize} * (#{pageNo} - 1)+ #{pageSize} ) 
		    )TT1
		    WHERE rnum >= ( #{pageSize} * (#{pageNo} - 1)+ 1 ) ]]>
		)A
		CROSS JOIN
		(
		    SELECT COUNT(*) total_cnt
		    FROM users
		    --WHERE조건
            <include refid="searchCondition"></include>		    
		)B
        
    </select>

    
    <resultMap type="UserVO" id="userMap">
        <result column="EMAIL"     property="email"/>
        <result column="NAME"        property="name"/>
        <result column="PASSWORD"    property="password"/>
        <result column="TEL"     property="tel"/>
        <result column="EDU"       property="edu"/>
        <result column="ROLE"   property="role"/>

    </resultMap>
    
    <select id="getAll" parameterType="UserVO" resultMap="userMap">
		 SELECT    email,         
                    name,            
                    password,        
                    tel,         
                    edu,           
                    role                                       
		 FROM                                                     
		           users                                           
		 WHERE email LIKE #{email}||'%'                                
		 ORDER BY email                                      
    </select> <!-- 메일(계정) 불러오기? 회원 조회할때 사용할듯 -->

    <select id="getCount" resultType="int" parameterType="UserVO">
	     SELECT                   
	        COUNT(*) cnt         
		 FROM                     
		    users                
		 WHERE email LIKE #{email} ||'%'
    </select> <!-- users 테이블에있는 email갯수 카운팅 하는 쿼리 -->


    <update id="doUpdate" parameterType="UserVO">
	     UPDATE users             
		 SET email      = #{email}       
		     ,name      = #{name}       
		     ,password  = #{password}       
		     ,tel       = #{tel}       
		     ,edu       = #{edu}       
		     ,role      = #{role}       
		 WHERE                    
		     email      = #{email}          
    </update> <!-- 회원정보 변경 쿼리 -->




    <select id="doSelectOne" parameterType="UserVO" 
    resultType="UserVO">
		SELECT             
		    email,         
            name,            
            password,        
            tel,         
            edu,           
            role  
		 FROM               
		     users          
		 WHERE email = #{email}      
    </select> <!-- 한건 조회 -->


    <insert id="doSave" parameterType="UserVO">
		INSERT INTO users (  
		    email,         
		    name,            
		    password,        
		    tel,         
		    edu,           
		    role       		                 
		) VALUES (           
		    #{email},               
		    #{name},               
		    #{password},               
		    #{tel},               
		    #{edu},               
		    #{role}                        
		)                        
    </insert> <!-- 회원 등록 쿼리 -->


    <delete id="doDelete" parameterType="UserVO">
	    DELETE FROM users 
	    WHERE  email = #{email}
    </delete> <!--  회원 삭제 쿼리  -->

</mapper>  